package com.lti.dao;

import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import com.lti.configuration.JDBCConfiguration;
import com.lti.constant.SQLQueries;
import com.lti.dto.Admin;
import com.lti.dto.Course;
import com.lti.dto.Grade;
import com.lti.dto.Professor;
import com.lti.dto.RegisteredCourse;
import com.lti.dto.SemesterRegistration;
import com.lti.dto.Student;
import com.lti.exception.CourseNotFoundException;
import com.lti.mapper.GradeMapper;

@Repository
public class AdminDAOImpl implements AdminDAO{
    
    Logger logger = LoggerFactory.getLogger(AdminDAOImpl.class);
    
    @Autowired
    private JDBCConfiguration jdbcTemplateObject;
    
	@Override
	public List<Grade> generateReportCardDAO(int StudentID) {
		List<Grade> reportCard = new ArrayList<Grade>();
		String sql = SQLQueries.SELECT_GRADES_BY_STUDENTID;
		reportCard = jdbcTemplateObject.jdbcTemplate().query(sql,new GradeMapper());
		
		return reportCard;
	}

	@Override
	public void addProfessorDAO(Professor professor) {
		try {
			String sql="insert into professors values(?,?,?,?,?,?)";
			jdbcTemplateObject.jdbcTemplate().update(sql, professor.getId(), professor.getName(), professor.getDepartmentId(),professor.getEmail(),professor.getPhone(),professor.getAddress());
		} catch(Exception e) {
			System.out.println("Professor has not been added"); 
		}
		
	}
	
	@Override
	public void approveStudentRegistrationDAO(int studentID, int approvalStatus) {
		/*
		try{
			conn = DBUtils.getConnection();
			String sql="UPDATE semesterregistration SET ApprovalStatus = ? WHERE StudentId= ?";
			stmt = conn.prepareStatement(sql);

			stmt.setInt(1,approvalStatus); 
			stmt.setInt(2, studentID); 
			stmt.executeUpdate();
			
		}catch(SQLException se){
			//Handle errors for JDBC
			se.printStackTrace();
		}catch(Exception e){
			//Handle errors for Class.forName
			e.printStackTrace();
		}
		*/
	}
	
	@Override
	public void createStudentRegistrationDAO(SemesterRegistration semesterRegistration) {
		/*try{
			conn = DBUtils.getConnection();
			String sql="insert into semesterregistration(StudentId,ApprovalStatus,AdminId,Comment) values(?,?,?,?)";
			stmt = conn.prepareStatement(sql);

		//	stmt.setInt(1, 2);  // registration id will be autogenerated
			stmt.setInt(1,semesterRegistration.getStudentId()); //student id
			stmt.setInt(2, semesterRegistration.getApprovalStatus()); //approval status
			stmt.setInt(3, semesterRegistration.getAdminId());//admin id
			stmt.setString(4, semesterRegistration.getComments());//comment
			stmt.executeUpdate();
		}catch(SQLException se){
			//Handle errors for JDBC
			se.printStackTrace();
		}catch(Exception e){
			//Handle errors for Class.forName
			e.printStackTrace();
		}*/
	}
	@Override
	public void addCourseDAO(Course course) {
		/*try{
			conn = DBUtils.getConnection();
			String sql="insert into course values(?,?,?)";
			stmt = conn.prepareStatement(sql);

			int id=course.getCourseId();
			String name=course.getCourseName();
			String description =course.getDescription();

			stmt.setInt(1, id);
			stmt.setString(2,name);
			stmt.setString(3, description);
			stmt.executeUpdate();
		}catch(SQLException se){
			//Handle errors for JDBC
			se.printStackTrace();
		}catch(Exception e){
			//Handle errors for Class.forName
			e.printStackTrace();
		}*/
	}
	

	@Override
	public void removeCourseDAO(int id) throws CourseNotFoundException {
		/*try{
			conn = DBUtils.getConnection();
			String sql = "SELECT * From course WHERE CourseID = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id);
			ResultSet rs = stmt.executeQuery();
			
			if(!rs.next()) {
				throw new CourseNotFoundException();
			}
			
			conn = DBUtils.getConnection();
			sql="DELETE from course where CourseID=?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id);
			stmt.executeUpdate();
		}catch(CourseNotFoundException ce) {
			throw new CourseNotFoundException();
		}catch(SQLException se){
			//Handle errors for JDBC
			se.printStackTrace();
		}catch(Exception e){
			//Handle errors for Class.forName
			e.printStackTrace();
		}*/
	}

	@Override
	public void updateCourseDAO(int id, String name, String description) throws CourseNotFoundException {
		/*try{
			conn = DBUtils.getConnection();
			String sql = "SELECT * From course WHERE CourseID = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id);
			ResultSet rs = stmt.executeQuery();
			
			if(!rs.next()) {
				throw new CourseNotFoundException();
			}
			
			conn = DBUtils.getConnection();
			sql = "UPDATE course SET CourseName=?, Description=? WHERE CourseID=?";
			stmt = conn.prepareStatement(sql);
			
			stmt.setString(1,name);
			stmt.setString(2, description);
			stmt.setInt(3, id);
			stmt.executeUpdate();
		}catch(CourseNotFoundException ce) {
			throw new CourseNotFoundException();
		}catch(SQLException se){
			//Handle errors for JDBC
			se.printStackTrace();
		}catch(Exception e){
			//Handle errors for Class.forName
			e.printStackTrace();
		} */  
	}

	@Override
	public Boolean checkAvailabilityDAO(int id){
		/*try{
			conn = DBUtils.getConnection();
			String sql = "SELECT Capacity, Enrolled From coursecatalog WHERE Id = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id);
			ResultSet rs = stmt.executeQuery();

			if(rs.next()) {
				if(rs.getInt("Enrolled") < rs.getInt("Capacity")) {
					return true;
				}
				else {
					return false;
				}
			}
			else {
				return null;
			}	
		}catch(SQLException se){
			//Handle errors for JDBC
			se.printStackTrace();
		}catch(Exception e){
			//Handle errors for Class.forName
			e.printStackTrace();
		}*/
		return null;
	}

	@Override
	public void viewCourses(int studentID) {
		/*
		System.out.println("Student " + studentID + " is registered for the following courses:");
		   try {

			  conn = DBUtils.getConnection();
			  
		      stmt = conn.prepareStatement(SQLQueries.SELECT_STUDENT_COURSES_BY_STUDENTID);
		      stmt.setInt(1,studentID);
		      ResultSet rs = stmt.executeQuery();
		      while(rs.next()) {
		    	  int courseId = rs.getInt("CourseId");
		    	  String courseName = rs.getString("CourseName");
		    	  System.out.println(courseId + ": " + courseName);
		      }

		   } catch(SQLException se){
		      //Handle errors for JDBC
		      se.printStackTrace();
		   } catch(Exception e){
		      //Handle errors for Class.forName
		      e.printStackTrace();
		   }*/
	}

	@Override
	public SemesterRegistration getSemesterRegistrationDAO(int studentId) {
		/*
		SemesterRegistration registration = null;
		   try {

			  conn = DBUtils.getConnection();
			  
		      stmt = conn.prepareStatement(SQLQueries.SELECT_SEMESTER_REGISTRATION_BY_STUDENTID);
		      stmt.setInt(1,studentId);
		      ResultSet rs = stmt.executeQuery();
		      if(rs.next()) {
		    	  int registrationId = rs.getInt("RegistrationId");
		    	  int _studentId = rs.getInt("StudentId");
		    	  int approvalStatus = rs.getInt("ApprovalStatus");
		    	  int adminId = rs.getInt("AdminId");
		    	  String comment = rs.getString("Comment");
		    	  registration = new SemesterRegistration(registrationId, _studentId, adminId, approvalStatus, comment);
		      }

		   } catch(SQLException se){
		      //Handle errors for JDBC
		      se.printStackTrace();
		   } catch(Exception e){
		      //Handle errors for Class.forName
		      e.printStackTrace();
		   }
		
		return registration;*/
		return null;
	}

	@Override
	public void updateCourseCatalogEnrollmentForCourseDAO(int courseId) {
	/*
	   int totalEnrolled = 0;
	   try {

		  conn = DBUtils.getConnection();
		  
	      stmt = conn.prepareStatement(SQLQueries.SELECT_ENROLLMENT_COURSE_CATALOG_BY_COURSEID);
	      stmt.setInt(1,courseId);
	      ResultSet rs = stmt.executeQuery();
	      if(rs.next()) {
	    	  totalEnrolled = rs.getInt("Enrolled");
	      }
		  
	      stmt = conn.prepareStatement(SQLQueries.UPDATE_ENROLLMENT_COURSE_CATALOG_BY_COURSEID);
	      stmt.setInt(1, totalEnrolled + 1);
	      stmt.setInt(2,courseId);
	      stmt.executeUpdate();

	   } catch(SQLException se){
	      //Handle errors for JDBC
	      se.printStackTrace();
	   } catch(Exception e){
	      //Handle errors for Class.forName
	      e.printStackTrace();
	   }	*/	
	}

}
